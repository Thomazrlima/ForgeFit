Domain Academia {
    Subdomain CoreAcademia {
        type = CORE_DOMAIN
    }
}

BoundedContext AcademiaContext implements CoreAcademia {

    Aggregate Aula {
        Entity Aula {
            aggregateRoot
            
            -AulaId id
            -ProfessorId professorId
            
            Modalidade modalidade
            Espaco espaco
            int capacidade

            Date inicio
            Date fim

            StatusAula status
            
            Recorrencia recorrencia
            List<OcorrenciaExcecao> excecoes
            List<Reserva> reservas
            List<PosicaoListaDeEspera> listaDeEspera

            Repository AulaRepository {
                void salvar(@Aula aula);
                @Aula obterPorId(@AulaId aulaId);
                List<@Aula> buscarPorEspacoEPeriodo(@Espaco espaco, Date inicio, Date fim);
                List<@Aula> buscarPorProfessorEPeriodo(@ProfessorId professorId, Date inicio, Date fim);
            }
        }

        Service AulaService {
            @Aula criarAulaUnica(@ProfessorId professorId, @Modalidade modalidade, @Espaco espaco, int capacidade, Date inicio, Date fim);
            @Aula criarAulaRecorrente(@ProfessorId professorId, @Modalidade modalidade, @Espaco espaco, int capacidade, Date inicio, @Recorrencia recorrencia);
            void alterarHorarioPrincipal(@AulaId aulaId, Date novoInicio, Date novoFim);
            void reagendarOcorrenciaUnica(@AulaId aulaId, Date dataOriginal, Date novoInicio, Date novoFim);
            void cancelarOcorrenciaUnica(@AulaId aulaId, Date dataDaOcorrencia);
            void cancelarAulaDefinitivamente(@AulaId aulaId);
        }

        Service ReservaService {
            @Reserva reservarVaga(@Cpf alunoId, @AulaId aulaId);
            void cancelarReserva(@Cpf alunoId, @AulaId aulaId);
        }

        ValueObject AulaId { int id }
        
        ValueObject Reserva {
            -Cpf alunoId
            Date dataDaReserva
            StatusReserva status
        }

        enum StatusAula { ATIVA, CANCELADA }

        enum StatusReserva { CONFIRMADA, CANCELADA_PELO_ALUNO, CANCELADA_PELA_ACADEMIA }

        ValueObject PosicaoListaDeEspera {
            -Cpf alunoId
            Date timestampDeEntrada
        }
        
        enum Modalidade {
            MUSCULACAO, SPINNING, YOGA, BOXE, CROSSFIT, PILATES, ZUMBA,
            FUNCIONAL, JIUJITSU, MUAYTHAI, DANCA
        }
        
        enum Espaco {
            SALA01_MULTIUSO, SALA02_MULTIUSO, SALA03_SPINNING, ESTUDIO_PILATES,
            AREA_DE_LUTAS, AREA_DE_PESO_LIVRE
        }

        ValueObject Recorrencia {
            TipoRecorrencia tipo
            List<DiaDaSemana> diasDaSemana
            Date dataFimRecorrencia
        }
        
        Entity OcorrenciaExcecao {
            -OcorrenciaExcecaoId id
            -Date dataOriginalDaOcorrencia
            boolean cancelada
            Date novoInicio
            Date novoFim
        }

        ValueObject OcorrenciaExcecaoId { int id }

        enum TipoRecorrencia { SEMANAL, MENSAL, SEMESTRAL, ANUAL }
        enum DiaDaSemana { DOMINGO, SEGUNDA, TERCA, QUARTA, QUINTA, SEXTA, SABADO }
    }

    Aggregate Aluno {
        Entity Aluno {
            aggregateRoot
            
            -Cpf cpf
            -Matricula matricula
            String nome
            Date dataNascimento
            int pontuacaoTotal
            double creditos
            StatusAluno status
            
            List<AvaliacaoFisica> historicoDeAvaliacoes
            List<PlanoDeTreino> historicoDePlanos
            List<Frequencia> historicoDeFrequencia

            Repository AlunoRepository {
                void salvar(@Aluno aluno);
                @Aluno obterPorCpf(@Cpf cpf);
            }
        }

        Service TreinoService {
            @PlanoDeTreino criarPlanoDeTreino(@Cpf alunoCpf, @ProfessorId professorId, Date validadeSugerida, List<@TreinoDiario> treinos);
        }

        Service AvaliacaoFisicaService {
            @AvaliacaoFisica registrarAvaliacaoFisica(@Cpf alunoCpf, @ProfessorId professorId, @AvaliacaoFisica novaAvaliacao);
        }

        Service ReembolsoService {
            double calcularCreditoDeReembolso(@AulaId aulaId);
        }

        Service FrequenciaService {
            @Frequencia registrarFrequencia(@Cpf alunoId, @AulaId aulaId, Date data);
        }
        
        ValueObject Frequencia {
            -AulaId aulaId
            Date dataDaOcorrencia
            StatusFrequencia status
        }
        
        enum StatusFrequencia { PRESENTE, FALTA }

        enum StatusAluno { ATIVO, BLOQUEADO }

        ValueObject Cpf { String valor }
        ValueObject Matricula { String valor }
        
        ValueObject AvaliacaoFisica {
            -Date dataDaAvaliacao
            -ProfessorId professorResponsavel
            double massaGordaPercentual
            double massaGordaKg
            double massaMagraKg
            double massaMuscularEsqueleticaKg
            double aguaCorporalTotalPercentual
            int gorduraVisceralNivel
            int taxaMetabolicaBasalKcal
            double massaOsseaKg
            double indiceDeMassaCorporal
            double bracoRelaxadoCm
            double bracoContraidoCm
            double antebracoCm
            double toraxPeitoralCm
            double cinturaCm
            double abdomenCm
            double quadrilCm
            double coxaCm
            double panturrilhaCm
        }
        
        Entity PlanoDeTreino {
            -PlanoDeTreinoId id
            -ProfessorId professorResponsavel
            Date dataCriacao
            Date dataValidadeSugerida
            List<TreinoDiario> treinosDaSemana
        }
        
        Entity TreinoDiario {
            -LetraDoTreino letra
            TipoDoTreino tipo
            List<ItemDeExercicio> exercicios
        }
        
        enum LetraDoTreino { A, B, C, D, E, F, G }
        
        ValueObject ItemDeExercicio {
            Exercicio exercicio
            Repeticao repeticao
        }
        
        ValueObject Repeticao {
            int series
            String contagem
        }
        
        enum TipoDoTreino {
            SUPERIORES, INFERIORES, CORPO_INTEIRO, PUSH, PULL, PERNAS,
            PEITO_E_TRICEPS, COSTAS_E_BICEPS, OMBROS_E_TRAPEZIO, BRACOS_COMPLETOS,
            PEITO_E_BICEPS, COSTAS_E_TRICEPS, FOCO_PEITO, FOCO_COSTAS, FOCO_OMBROS,
            FOCO_GLUTEOS, ABDOMEN_E_CORE, PANTURRILHAS, CARDIO
        }
        
        enum Exercicio {
            SUPINO_RETO, SUPINO_INCLINADO, SUPINO_DECLINADO, CRUCIFIXO_COM_HALTERES,
            VOADOR_PECK_DECK, CROSSOVER_NA_POLIA, FLEXAO_DE_BRACO, BARRA_FIXA,
            PUXADA_ALTA_PULLEY_FRENTE, REMADA_CURVADA_COM_BARRA, REMADA_CAVALINHO,
            REMADA_UNILATERAL_SERROTE, REMADA_SENTADA_NA_POLIA, PULLDOWN_NA_POLIA,
            AGACHAMENTO_LIVRE_COM_BARRA, LEG_PRESS_45, CADEIRA_EXTENSORA, AGACHAMENTO_HACK,
            AFUNDO_AVANCO, LEVANTAMENTO_TERRA, STIFF_COM_BARRA, MESA_FLEXORA, CADEIRA_FLEXORA,
            ELEVACAO_PELVICA, CADEIRA_ABDUTORA, GLUTEO_NA_POLIA_COICE, PANTURRILHA_EM_PE_GEMEOS,
            PANTURRILHA_SENTADO_SOLEO, DESENVOLVIMENTO_MILITAR_COM_BARRA, DESENVOLVIMENTO_COM_HALTERES,
            ELEVACAO_LATERAL_COM_HALTERES, ELEVACAO_FRONTAL, CRUCIFIXO_INVERTIDO, REMADA_ALTA,
            ROSCA_DIRETA_COM_BARRA, ROSCA_ALTERNADA_COM_HALTERES, ROSCA_MARTELO, ROSCA_SCOTT,
            ROSCA_CONCENTRADA, TRICEPS_PULLEY_COM_BARRA, TRICEPS_PULLEY_COM_CORDA, TRICEPS_TESTA,
            TRICEPS_FRANCES, MERGULHO_NO_BANCO, PARALELAS, PRANCHA_ISOMETRICA, ABDOMINAL_SUPRA_CRUNCH,
            ABDOMINAL_INFRA_NA_PARALELA, ELEVACAO_DE_PERNAS_DEITADO, RODA_ABDOMINAL_AB_WHEEL
        }

        ValueObject ProfessorId { int id }
        ValueObject PlanoDeTreinoId { int id }
    }

    Aggregate Professor {
        Entity Professor {
            aggregateRoot
            -Cpf cpf
            -Matricula matricula
            String nome
            Date dataNascimento
        }

        ValueObject Cpf { String valor }
        ValueObject Matricula { String valor }
    }

    Aggregate Guilda {
        Entity Guilda {
            aggregateRoot
            -GuildaId id
            String nome
            String descricao
            String imagemURL
            StatusGuilda status
            -CodigoConvite codigoConvite
            -Cpf mestreDaGuilda
            List<Cpf> membros
            int pontuacaoTotal
        }

        Repository GuildaRepository {
            void salvar(@Guilda guilda);
            @Guilda obterPorId(@GuildaId id);
            List<@Guilda> listarGuildas();
            @Guilda buscarPorCodigoConvite(@CodigoConvite codigo);
        }

        Service GuildaService {
            @Guilda criarGuilda(@Cpf mestreId, String nome, String descricao, String imagemURL);
            void alterarDadosGuilda(@GuildaId guildaId, String novoNome, String novaDescricao, String novaImagemURL);
            void excluirGuilda(@GuildaId guildaId);
            void entrarEmGuilda(@Cpf alunoId, @CodigoConvite codigo);
            void sairDaGuilda(@Cpf alunoId, @GuildaId guildaId);
        }

        enum StatusGuilda { ATIVA, INATIVA }
        ValueObject GuildaId { int id }
        ValueObject CodigoConvite { String valor }
        ValueObject Cpf { String valor }
    }

    Aggregate Torneio {
        Entity Torneio {
            aggregateRoot
            -TorneioId id
            String nome
            @Premio premioPrimeiroLugar
            @Premio premioSegundoLugar
            @Premio premioTerceiroLugar
            StatusTorneio status
            Date dataInicio
            Date dataFim
            List<PosicaoRanking> rankingFinal

            Repository TorneioRepository {
                void salvar(@Torneio torneio);
                @Torneio obterPorId(@TorneioId id);
                @Torneio buscarTorneioAtivo(Date dataAtual);
                List<@Torneio> listarTorneios();
            }
        }

        Service TorneioService {
            @Torneio criarTorneio(String nome, Date dataInicio, Date dataFim, @Premio p1, @Premio p2, @Premio p3);
            void editarTorneio(@TorneioId torneioId, String novoNome, Date novaDataInicio, Date novaDataFim, @Premio novoP1, @Premio novoP2, @Premio novoP3);
            void cancelarTorneio(@TorneioId torneioId);
            @Premio definirPremioDoPodio(@TorneioId torneioId, @PosicaoDoPodio posicao, @Premio premio);
        }

        enum PosicaoDoPodio {
            PRIMEIRO_LUGAR,
            SEGUNDO_LUGAR,
            TERCEIRO_LUGAR
        }

        enum StatusTorneio {
            PLANEJADO,
            ATIVO,
            FINALIZADO,
            CANCELADO
        }

        ValueObject TorneioId { int id }

        ValueObject Premio {
            String nome
            String urlImagem
        }

        ValueObject PosicaoRanking {
            int posicao
            -GuildaId guildaId
            int pontuacaoNoTorneio
        }

        ValueObject GuildaId { int id }
    }

    Aggregate Avaliacao {
        Entity Avaliacao {
            aggregateRoot
            -AvaliacaoId id
            -Cpf alunoId
            -ProfessorId professorId
            -AulaId aulaId
            Date dataDaOcorrenciaDaAula
            Notas notas
            String comentario
            Date dataDaAvaliacao

            Repository AvaliacaoRepository {
                void salvar(@Avaliacao avaliacao);
                @Avaliacao obterPorId(@AvaliacaoId id);
                List<@Avaliacao> buscarPorProfessor(@ProfessorId professorId);
                boolean existeAvaliacao(@Cpf alunoId, @AulaId aulaId, Date dataDaOcorrencia);
            }
        }

        Service AvaliacaoService {
            void criarAvaliacao(@Cpf alunoId, @ProfessorId professorId, @AulaId aulaId, Date dataDaOcorrencia, @Notas notas, String comentario);
        }

        ValueObject AvaliacaoId { int id }
        ValueObject Notas { int pontualidade, int didatica, int atencao }
        ValueObject Cpf { String valor }
        ValueObject ProfessorId { int id }
        ValueObject AulaId { int id }
    }

    Aggregate Checkin {
        Entity Checkin {
            aggregateRoot
            -CheckinId id
            -Cpf alunoId
            -GuildaId guildaId
            Date dataDoCheckin
            int pontuacaoGerada
            String mensagem
            String urlImagem
            ContextoDoCheckin contexto

            Repository CheckinRepository {
                salvar(@Checkin checkin);
                List<@Checkin> buscarPorAluno(@Cpf alunoId);
            }
        }

        Service CheckinService {
            Checkin realizarCheckinDeTreino(@Cpf alunoId, @GuildaId guildaId, @PlanoDeTreinoId planoDeTreinoId, @LetraDoTreino letraDoTreino, String mensagem, String urlImagem);
        }

        ValueObject CheckinId { int id }

        ValueObject ContextoDoCheckin {
            TipoDeCheckin tipo
            -AulaId aulaId
            -PlanoDeTreinoId planoDeTreinoId 
            -LetraDoTreino letraDoTreino
        }

        enum TipoDeCheckin { AULA, TREINO }
        ValueObject Cpf { String valor }
        ValueObject GuildaId { int id }
        ValueObject AulaId { int id }
        ValueObject PlanoDeTreinoId { int id }
        enum LetraDoTreino { A, B, C, D, E, F, G }
    }
}
